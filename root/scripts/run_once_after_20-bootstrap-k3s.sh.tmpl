{{- if .is_bootstrap }}#!/bin/bash
set -euo pipefail

# Bootstrap K3s cluster on {{ .hostname }}
echo "Bootstrapping K3s cluster on {{ .hostname }}..."

# Verify K3S token file exists
if [[ ! -f "/var/lib/rancher/k3s/server/token" ]]; then
    echo "K3S token file /var/lib/rancher/k3s/server/token does not exist"
    echo "This file must be present before running K3s bootstrap"
    exit 1
fi

K3S_TOKEN=$(cat /var/lib/rancher/k3s/server/token)

# Install K3s server with cluster-init
echo "Installing K3s server..."
curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="{{ .k3s.version }}" K3S_TOKEN="$K3S_TOKEN" sh -s - server

# Wait for k3s to be ready
echo "Waiting for K3s to be ready..."
timeout 300 bash -c 'until sudo k3s kubectl get nodes >/dev/null 2>&1; do sleep 5; done'
sudo k3s kubectl wait --for=condition=Ready nodes --all --timeout=300s

# Copy kubeconfig with proper permissions
echo "Setting up kubeconfig..."
sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
sudo chown $(id -u):$(id -g) ~/.kube/config
chmod 600 ~/.kube/config

# Update kubeconfig to use virtual IP
sed -i 's/127.0.0.1/{{ .network.virtual_ip }}/g' ~/.kube/config

# Display cluster info
echo "K3s cluster bootstrapped successfully"
echo "Cluster info:"
kubectl get nodes -o wide
kubectl cluster-info

echo ""
echo "Cluster token for other nodes: $K3S_TOKEN"
echo "Bootstrap complete - other nodes can now join the cluster"
{{- end }}